const express = require('express')
const axios = require('axios')
const { PrismaClient } = require('@prisma/client')

const router = express.Router()
const prisma = new PrismaClient()
const LINE_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN

// -- In-memory session --
const registerSession = {} // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user
const technicianSession = {} // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≤‡∏á

// Webhook Handler
router.post('/', async (req, res) => {
  const events = req.body.events

  for (const event of events) {
    const userId = event.source.userId

    // ============================
    //‡∏Å‡∏£‡∏ì‡∏µ Postback (‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Flex)
    // ============================

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô router.post('/', async (req, res) => { ... })

    if (event.type === 'postback') {
      const postbackData = new URLSearchParams(event.postback.data);
      const action = postbackData.get('action');
      const jobId = postbackData.get('jobId');

      if (action === 'accept') {
        const technicianUserId = event.source.userId;

        // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const job = await prisma.job.findUnique({
          where: { id: Number(jobId) },
          include: {
            user: true,
          }
        });

        if (!job || job.status !== 'PENDING') {
          await reply(event.replyToken, '‚ùå ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
          return;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
        await prisma.job.update({
          where: { id: job.id },
          data: {
            status: 'IN_PROGRESS',
            technicianId: technicianUserId,
          },
        });

        // ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ä‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
        const flexMsg = {
          type: 'flex',
          altText: `üõ†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${job.jobId}`,
          contents: {
            type: 'bubble',
            body: {
              type: 'box',
              layout: 'vertical',
              contents: [
                { type: 'text', text: 'üõ†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°', weight: 'bold', size: 'lg' },
                { type: 'text', text: `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô: ${job.jobId}` },
                { type: 'text', text: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£`, color: '#FFA500', margin: 'lg' },
              ],
            },
          },
        };

        const flexMsgGroup = {
          type: 'flex',
          altText: `üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${job.jobId}`,
          contents: {
            type: 'bubble',
            body: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: `üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ #${job.jobId}`,
                  weight: 'bold',
                  size: 'lg',
                  wrap: true
                }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              spacing: 'sm',
              contents: [
                {
                  type: 'button',
                  action: {
                    type: 'postback',
                    label: 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                    data: `action=in_progress&jobId=${job.id}`
                  },
                  style: 'primary',
                  color: '#FFA500'
                }
              ]
            }
          }
        }


        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ä‡πà‡∏≤‡∏á
        await pushToLine({
          to: job.userId,
          messages: [flexMsg],
        });

        await pushToLine({
          to: process.env.LINE_GROUP_ID,
          messages: [flexMsgGroup],
        });

        await reply(event.replyToken, `‚úÖ ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${job.jobId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`);
      } else if (action === 'in_progress') {
        const job = await prisma.job.findUnique({
          where: { id: Number(jobId) },
          include: { user: true }
        })

        if (!job || job.status !== 'IN_PROGRESS') {
          await reply(event.replyToken, '‚ùå ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
          return;
        }

        await prisma.job.update({
          where: { id: job.id },
          data: { status: 'COMPLETED' }
        })

        const userFlexMsg = {
          type: 'flex',
          altText: `‚úÖ ‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${job.jobId} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
          contents: {
            type: 'bubble',
            body: {
              type: 'box',
              layout: 'vertical',
              contents: [
                { type: 'text', text: '‚úÖ ‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß', weight: 'bold', size: 'lg' },
                { type: 'text', text: `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô: ${job.jobId}` },
                { type: 'text', text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', color: '#00B900', margin: 'lg' }
              ]
            }
          }
        }

        const groupFlexMsg = {
          type: 'flex',
          altText: `üì¢ ‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${job.jobId} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
          contents: {
            type: 'bubble',
            body: {
              type: 'box',
              layout: 'vertical',
              contents: [
                { type: 'text', text: `üì¢ ‡∏á‡∏≤‡∏ô #${job.jobId} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, weight: 'bold', size: 'lg', wrap: true },
                { type: 'text', text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', color: '#00B900', margin: 'md' }
              ]
            }
          }
        }

        await pushToLine({ to: job.userId, messages: [userFlexMsg] })
        await pushToLine({ to: process.env.LINE_GROUP_ID, messages: [groupFlexMsg] })
        await reply(event.replyToken, `‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${job.jobId} ‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" ‡πÅ‡∏•‡πâ‡∏ß`)
      }
    }



    const message = event.message?.text?.trim()

    if (!userId || !message) continue

    // ===== ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ä‡πà‡∏≤‡∏á =====
    if (message === '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ä‡πà‡∏≤‡∏á') {
      technicianSession[userId] = { step: 'ASK_NAME' }
      await reply(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      continue
    }

    if (technicianSession[userId]?.step === 'ASK_NAME') {
      const [firstName, lastName = ''] = message.split(' ')
      const existing = await prisma.user.findFirst({ where: { userId: userId } })

      if (existing) {
        await prisma.user.update({
          where: { id: existing.id },
          data: { firstName, lastName, role: 'technician' },
        })
      } else {
        await prisma.user.create({
          data: {
            firstName,
            lastName,
            phone: '-', location: '-', role: 'technician',
            userId: userId,
          },
        })
      }

      delete technicianSession[userId]
      await reply(event.replyToken, `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${firstName} ${lastName}`)
      continue
    }

    // ===== ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ =====
    if (message === '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô') {
      registerSession[userId] = { step: 'ASK_PHONE' }
      await reply(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      continue
    }

    if (registerSession[userId]?.step === 'ASK_PHONE') {
      const phone = message
      const user = await prisma.user.findFirst({ where: { phone } })

      if (user) {
        await prisma.user.update({
          where: { phone },
          data: { userId: userId },
        })
        await reply(event.replyToken, `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ${user.firstName} ${user.lastName}`)
      } else {
        await reply(event.replyToken, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà')
      }

      delete registerSession[userId]
      continue
    }

    // ===== ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ =====
    await reply(event.replyToken, '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ä‡πà‡∏≤‡∏á" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≤‡∏á')
  }

  res.sendStatus(200)
})

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function reply(replyToken, text) {
  await axios.post('https://api.line.me/v2/bot/message/reply', {
    replyToken,
    messages: [{ type: 'text', text }],
  }, {
    headers: {
      'Authorization': `Bearer ${LINE_TOKEN}`,
      'Content-Type': 'application/json',
    },
  })
}

async function pushToLine(payload) {
  await axios.post('https://api.line.me/v2/bot/message/push', payload, {
    headers: {
      'Authorization': `Bearer ${LINE_TOKEN}`,
      'Content-Type': 'application/json',
    },
  });
}

module.exports = router
